// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/betable/gossie/src/cassandra (interfaces: Cassandra)

// Package mock_cassandra is a generated GoMock package.
package mock_cassandra

import (
	context "context"
	cassandra "github.com/betable/gossie/src/cassandra"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCassandra is a mock of Cassandra interface
type MockCassandra struct {
	ctrl     *gomock.Controller
	recorder *MockCassandraMockRecorder
}

// MockCassandraMockRecorder is the mock recorder for MockCassandra
type MockCassandraMockRecorder struct {
	mock *MockCassandra
}

// NewMockCassandra creates a new mock instance
func NewMockCassandra(ctrl *gomock.Controller) *MockCassandra {
	mock := &MockCassandra{ctrl: ctrl}
	mock.recorder = &MockCassandraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCassandra) EXPECT() *MockCassandraMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockCassandra) Add(arg0 context.Context, arg1 []byte, arg2 *cassandra.ColumnParent, arg3 *cassandra.CounterColumn, arg4 cassandra.ConsistencyLevel) error {
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockCassandraMockRecorder) Add(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCassandra)(nil).Add), arg0, arg1, arg2, arg3, arg4)
}

// AtomicBatchMutate mocks base method
func (m *MockCassandra) AtomicBatchMutate(arg0 context.Context, arg1 map[string]map[string][]*cassandra.Mutation, arg2 cassandra.ConsistencyLevel) error {
	ret := m.ctrl.Call(m, "AtomicBatchMutate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AtomicBatchMutate indicates an expected call of AtomicBatchMutate
func (mr *MockCassandraMockRecorder) AtomicBatchMutate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicBatchMutate", reflect.TypeOf((*MockCassandra)(nil).AtomicBatchMutate), arg0, arg1, arg2)
}

// BatchMutate mocks base method
func (m *MockCassandra) BatchMutate(arg0 context.Context, arg1 map[string]map[string][]*cassandra.Mutation, arg2 cassandra.ConsistencyLevel) error {
	ret := m.ctrl.Call(m, "BatchMutate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchMutate indicates an expected call of BatchMutate
func (mr *MockCassandraMockRecorder) BatchMutate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchMutate", reflect.TypeOf((*MockCassandra)(nil).BatchMutate), arg0, arg1, arg2)
}

// Cas mocks base method
func (m *MockCassandra) Cas(arg0 context.Context, arg1 []byte, arg2 string, arg3, arg4 []*cassandra.Column, arg5, arg6 cassandra.ConsistencyLevel) (*cassandra.CASResult_, error) {
	ret := m.ctrl.Call(m, "Cas", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*cassandra.CASResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cas indicates an expected call of Cas
func (mr *MockCassandraMockRecorder) Cas(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cas", reflect.TypeOf((*MockCassandra)(nil).Cas), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// DescribeClusterName mocks base method
func (m *MockCassandra) DescribeClusterName(arg0 context.Context) (string, error) {
	ret := m.ctrl.Call(m, "DescribeClusterName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterName indicates an expected call of DescribeClusterName
func (mr *MockCassandraMockRecorder) DescribeClusterName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterName", reflect.TypeOf((*MockCassandra)(nil).DescribeClusterName), arg0)
}

// DescribeKeyspace mocks base method
func (m *MockCassandra) DescribeKeyspace(arg0 context.Context, arg1 string) (*cassandra.KsDef, error) {
	ret := m.ctrl.Call(m, "DescribeKeyspace", arg0, arg1)
	ret0, _ := ret[0].(*cassandra.KsDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeyspace indicates an expected call of DescribeKeyspace
func (mr *MockCassandraMockRecorder) DescribeKeyspace(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeyspace", reflect.TypeOf((*MockCassandra)(nil).DescribeKeyspace), arg0, arg1)
}

// DescribeKeyspaces mocks base method
func (m *MockCassandra) DescribeKeyspaces(arg0 context.Context) ([]*cassandra.KsDef, error) {
	ret := m.ctrl.Call(m, "DescribeKeyspaces", arg0)
	ret0, _ := ret[0].([]*cassandra.KsDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeyspaces indicates an expected call of DescribeKeyspaces
func (mr *MockCassandraMockRecorder) DescribeKeyspaces(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeyspaces", reflect.TypeOf((*MockCassandra)(nil).DescribeKeyspaces), arg0)
}

// DescribeLocalRing mocks base method
func (m *MockCassandra) DescribeLocalRing(arg0 context.Context, arg1 string) ([]*cassandra.TokenRange, error) {
	ret := m.ctrl.Call(m, "DescribeLocalRing", arg0, arg1)
	ret0, _ := ret[0].([]*cassandra.TokenRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLocalRing indicates an expected call of DescribeLocalRing
func (mr *MockCassandraMockRecorder) DescribeLocalRing(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLocalRing", reflect.TypeOf((*MockCassandra)(nil).DescribeLocalRing), arg0, arg1)
}

// DescribePartitioner mocks base method
func (m *MockCassandra) DescribePartitioner(arg0 context.Context) (string, error) {
	ret := m.ctrl.Call(m, "DescribePartitioner", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePartitioner indicates an expected call of DescribePartitioner
func (mr *MockCassandraMockRecorder) DescribePartitioner(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePartitioner", reflect.TypeOf((*MockCassandra)(nil).DescribePartitioner), arg0)
}

// DescribeRing mocks base method
func (m *MockCassandra) DescribeRing(arg0 context.Context, arg1 string) ([]*cassandra.TokenRange, error) {
	ret := m.ctrl.Call(m, "DescribeRing", arg0, arg1)
	ret0, _ := ret[0].([]*cassandra.TokenRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRing indicates an expected call of DescribeRing
func (mr *MockCassandraMockRecorder) DescribeRing(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRing", reflect.TypeOf((*MockCassandra)(nil).DescribeRing), arg0, arg1)
}

// DescribeSchemaVersions mocks base method
func (m *MockCassandra) DescribeSchemaVersions(arg0 context.Context) (map[string][]string, error) {
	ret := m.ctrl.Call(m, "DescribeSchemaVersions", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchemaVersions indicates an expected call of DescribeSchemaVersions
func (mr *MockCassandraMockRecorder) DescribeSchemaVersions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemaVersions", reflect.TypeOf((*MockCassandra)(nil).DescribeSchemaVersions), arg0)
}

// DescribeSnitch mocks base method
func (m *MockCassandra) DescribeSnitch(arg0 context.Context) (string, error) {
	ret := m.ctrl.Call(m, "DescribeSnitch", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnitch indicates an expected call of DescribeSnitch
func (mr *MockCassandraMockRecorder) DescribeSnitch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnitch", reflect.TypeOf((*MockCassandra)(nil).DescribeSnitch), arg0)
}

// DescribeSplits mocks base method
func (m *MockCassandra) DescribeSplits(arg0 context.Context, arg1, arg2, arg3 string, arg4 int32) ([]string, error) {
	ret := m.ctrl.Call(m, "DescribeSplits", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSplits indicates an expected call of DescribeSplits
func (mr *MockCassandraMockRecorder) DescribeSplits(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSplits", reflect.TypeOf((*MockCassandra)(nil).DescribeSplits), arg0, arg1, arg2, arg3, arg4)
}

// DescribeSplitsEx mocks base method
func (m *MockCassandra) DescribeSplitsEx(arg0 context.Context, arg1, arg2, arg3 string, arg4 int32) ([]*cassandra.CfSplit, error) {
	ret := m.ctrl.Call(m, "DescribeSplitsEx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*cassandra.CfSplit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSplitsEx indicates an expected call of DescribeSplitsEx
func (mr *MockCassandraMockRecorder) DescribeSplitsEx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSplitsEx", reflect.TypeOf((*MockCassandra)(nil).DescribeSplitsEx), arg0, arg1, arg2, arg3, arg4)
}

// DescribeTokenMap mocks base method
func (m *MockCassandra) DescribeTokenMap(arg0 context.Context) (map[string]string, error) {
	ret := m.ctrl.Call(m, "DescribeTokenMap", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTokenMap indicates an expected call of DescribeTokenMap
func (mr *MockCassandraMockRecorder) DescribeTokenMap(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTokenMap", reflect.TypeOf((*MockCassandra)(nil).DescribeTokenMap), arg0)
}

// DescribeVersion mocks base method
func (m *MockCassandra) DescribeVersion(arg0 context.Context) (string, error) {
	ret := m.ctrl.Call(m, "DescribeVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVersion indicates an expected call of DescribeVersion
func (mr *MockCassandraMockRecorder) DescribeVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVersion", reflect.TypeOf((*MockCassandra)(nil).DescribeVersion), arg0)
}

// ExecuteCql3Query mocks base method
func (m *MockCassandra) ExecuteCql3Query(arg0 context.Context, arg1 []byte, arg2 cassandra.Compression, arg3 cassandra.ConsistencyLevel) (*cassandra.CqlResult_, error) {
	ret := m.ctrl.Call(m, "ExecuteCql3Query", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*cassandra.CqlResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCql3Query indicates an expected call of ExecuteCql3Query
func (mr *MockCassandraMockRecorder) ExecuteCql3Query(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCql3Query", reflect.TypeOf((*MockCassandra)(nil).ExecuteCql3Query), arg0, arg1, arg2, arg3)
}

// ExecuteCqlQuery mocks base method
func (m *MockCassandra) ExecuteCqlQuery(arg0 context.Context, arg1 []byte, arg2 cassandra.Compression) (*cassandra.CqlResult_, error) {
	ret := m.ctrl.Call(m, "ExecuteCqlQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cassandra.CqlResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCqlQuery indicates an expected call of ExecuteCqlQuery
func (mr *MockCassandraMockRecorder) ExecuteCqlQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCqlQuery", reflect.TypeOf((*MockCassandra)(nil).ExecuteCqlQuery), arg0, arg1, arg2)
}

// ExecutePreparedCql3Query mocks base method
func (m *MockCassandra) ExecutePreparedCql3Query(arg0 context.Context, arg1 int32, arg2 [][]byte, arg3 cassandra.ConsistencyLevel) (*cassandra.CqlResult_, error) {
	ret := m.ctrl.Call(m, "ExecutePreparedCql3Query", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*cassandra.CqlResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutePreparedCql3Query indicates an expected call of ExecutePreparedCql3Query
func (mr *MockCassandraMockRecorder) ExecutePreparedCql3Query(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePreparedCql3Query", reflect.TypeOf((*MockCassandra)(nil).ExecutePreparedCql3Query), arg0, arg1, arg2, arg3)
}

// ExecutePreparedCqlQuery mocks base method
func (m *MockCassandra) ExecutePreparedCqlQuery(arg0 context.Context, arg1 int32, arg2 [][]byte) (*cassandra.CqlResult_, error) {
	ret := m.ctrl.Call(m, "ExecutePreparedCqlQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cassandra.CqlResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutePreparedCqlQuery indicates an expected call of ExecutePreparedCqlQuery
func (mr *MockCassandraMockRecorder) ExecutePreparedCqlQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePreparedCqlQuery", reflect.TypeOf((*MockCassandra)(nil).ExecutePreparedCqlQuery), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockCassandra) Get(arg0 context.Context, arg1 []byte, arg2 *cassandra.ColumnPath, arg3 cassandra.ConsistencyLevel) (*cassandra.ColumnOrSuperColumn, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*cassandra.ColumnOrSuperColumn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCassandraMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCassandra)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetCount mocks base method
func (m *MockCassandra) GetCount(arg0 context.Context, arg1 []byte, arg2 *cassandra.ColumnParent, arg3 *cassandra.SlicePredicate, arg4 cassandra.ConsistencyLevel) (int32, error) {
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount
func (mr *MockCassandraMockRecorder) GetCount(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCassandra)(nil).GetCount), arg0, arg1, arg2, arg3, arg4)
}

// GetIndexedSlices mocks base method
func (m *MockCassandra) GetIndexedSlices(arg0 context.Context, arg1 *cassandra.ColumnParent, arg2 *cassandra.IndexClause, arg3 *cassandra.SlicePredicate, arg4 cassandra.ConsistencyLevel) ([]*cassandra.KeySlice, error) {
	ret := m.ctrl.Call(m, "GetIndexedSlices", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*cassandra.KeySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexedSlices indicates an expected call of GetIndexedSlices
func (mr *MockCassandraMockRecorder) GetIndexedSlices(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexedSlices", reflect.TypeOf((*MockCassandra)(nil).GetIndexedSlices), arg0, arg1, arg2, arg3, arg4)
}

// GetMultiSlice mocks base method
func (m *MockCassandra) GetMultiSlice(arg0 context.Context, arg1 *cassandra.MultiSliceRequest) ([]*cassandra.ColumnOrSuperColumn, error) {
	ret := m.ctrl.Call(m, "GetMultiSlice", arg0, arg1)
	ret0, _ := ret[0].([]*cassandra.ColumnOrSuperColumn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiSlice indicates an expected call of GetMultiSlice
func (mr *MockCassandraMockRecorder) GetMultiSlice(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiSlice", reflect.TypeOf((*MockCassandra)(nil).GetMultiSlice), arg0, arg1)
}

// GetPagedSlice mocks base method
func (m *MockCassandra) GetPagedSlice(arg0 context.Context, arg1 string, arg2 *cassandra.KeyRange, arg3 []byte, arg4 cassandra.ConsistencyLevel) ([]*cassandra.KeySlice, error) {
	ret := m.ctrl.Call(m, "GetPagedSlice", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*cassandra.KeySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPagedSlice indicates an expected call of GetPagedSlice
func (mr *MockCassandraMockRecorder) GetPagedSlice(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagedSlice", reflect.TypeOf((*MockCassandra)(nil).GetPagedSlice), arg0, arg1, arg2, arg3, arg4)
}

// GetRangeSlices mocks base method
func (m *MockCassandra) GetRangeSlices(arg0 context.Context, arg1 *cassandra.ColumnParent, arg2 *cassandra.SlicePredicate, arg3 *cassandra.KeyRange, arg4 cassandra.ConsistencyLevel) ([]*cassandra.KeySlice, error) {
	ret := m.ctrl.Call(m, "GetRangeSlices", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*cassandra.KeySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeSlices indicates an expected call of GetRangeSlices
func (mr *MockCassandraMockRecorder) GetRangeSlices(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeSlices", reflect.TypeOf((*MockCassandra)(nil).GetRangeSlices), arg0, arg1, arg2, arg3, arg4)
}

// GetSlice mocks base method
func (m *MockCassandra) GetSlice(arg0 context.Context, arg1 []byte, arg2 *cassandra.ColumnParent, arg3 *cassandra.SlicePredicate, arg4 cassandra.ConsistencyLevel) ([]*cassandra.ColumnOrSuperColumn, error) {
	ret := m.ctrl.Call(m, "GetSlice", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*cassandra.ColumnOrSuperColumn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlice indicates an expected call of GetSlice
func (mr *MockCassandraMockRecorder) GetSlice(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlice", reflect.TypeOf((*MockCassandra)(nil).GetSlice), arg0, arg1, arg2, arg3, arg4)
}

// Insert mocks base method
func (m *MockCassandra) Insert(arg0 context.Context, arg1 []byte, arg2 *cassandra.ColumnParent, arg3 *cassandra.Column, arg4 cassandra.ConsistencyLevel) error {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCassandraMockRecorder) Insert(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCassandra)(nil).Insert), arg0, arg1, arg2, arg3, arg4)
}

// Login mocks base method
func (m *MockCassandra) Login(arg0 context.Context, arg1 *cassandra.AuthenticationRequest) error {
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockCassandraMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockCassandra)(nil).Login), arg0, arg1)
}

// MultigetCount mocks base method
func (m *MockCassandra) MultigetCount(arg0 context.Context, arg1 [][]byte, arg2 *cassandra.ColumnParent, arg3 *cassandra.SlicePredicate, arg4 cassandra.ConsistencyLevel) (map[string]int32, error) {
	ret := m.ctrl.Call(m, "MultigetCount", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(map[string]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultigetCount indicates an expected call of MultigetCount
func (mr *MockCassandraMockRecorder) MultigetCount(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultigetCount", reflect.TypeOf((*MockCassandra)(nil).MultigetCount), arg0, arg1, arg2, arg3, arg4)
}

// MultigetSlice mocks base method
func (m *MockCassandra) MultigetSlice(arg0 context.Context, arg1 [][]byte, arg2 *cassandra.ColumnParent, arg3 *cassandra.SlicePredicate, arg4 cassandra.ConsistencyLevel) (map[string][]*cassandra.ColumnOrSuperColumn, error) {
	ret := m.ctrl.Call(m, "MultigetSlice", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(map[string][]*cassandra.ColumnOrSuperColumn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultigetSlice indicates an expected call of MultigetSlice
func (mr *MockCassandraMockRecorder) MultigetSlice(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultigetSlice", reflect.TypeOf((*MockCassandra)(nil).MultigetSlice), arg0, arg1, arg2, arg3, arg4)
}

// PrepareCql3Query mocks base method
func (m *MockCassandra) PrepareCql3Query(arg0 context.Context, arg1 []byte, arg2 cassandra.Compression) (*cassandra.CqlPreparedResult_, error) {
	ret := m.ctrl.Call(m, "PrepareCql3Query", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cassandra.CqlPreparedResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareCql3Query indicates an expected call of PrepareCql3Query
func (mr *MockCassandraMockRecorder) PrepareCql3Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareCql3Query", reflect.TypeOf((*MockCassandra)(nil).PrepareCql3Query), arg0, arg1, arg2)
}

// PrepareCqlQuery mocks base method
func (m *MockCassandra) PrepareCqlQuery(arg0 context.Context, arg1 []byte, arg2 cassandra.Compression) (*cassandra.CqlPreparedResult_, error) {
	ret := m.ctrl.Call(m, "PrepareCqlQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cassandra.CqlPreparedResult_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareCqlQuery indicates an expected call of PrepareCqlQuery
func (mr *MockCassandraMockRecorder) PrepareCqlQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareCqlQuery", reflect.TypeOf((*MockCassandra)(nil).PrepareCqlQuery), arg0, arg1, arg2)
}

// Remove mocks base method
func (m *MockCassandra) Remove(arg0 context.Context, arg1 []byte, arg2 *cassandra.ColumnPath, arg3 int64, arg4 cassandra.ConsistencyLevel) error {
	ret := m.ctrl.Call(m, "Remove", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockCassandraMockRecorder) Remove(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCassandra)(nil).Remove), arg0, arg1, arg2, arg3, arg4)
}

// RemoveCounter mocks base method
func (m *MockCassandra) RemoveCounter(arg0 context.Context, arg1 []byte, arg2 *cassandra.ColumnPath, arg3 cassandra.ConsistencyLevel) error {
	ret := m.ctrl.Call(m, "RemoveCounter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCounter indicates an expected call of RemoveCounter
func (mr *MockCassandraMockRecorder) RemoveCounter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCounter", reflect.TypeOf((*MockCassandra)(nil).RemoveCounter), arg0, arg1, arg2, arg3)
}

// SetCqlVersion mocks base method
func (m *MockCassandra) SetCqlVersion(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "SetCqlVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCqlVersion indicates an expected call of SetCqlVersion
func (mr *MockCassandraMockRecorder) SetCqlVersion(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCqlVersion", reflect.TypeOf((*MockCassandra)(nil).SetCqlVersion), arg0, arg1)
}

// SetKeyspace mocks base method
func (m *MockCassandra) SetKeyspace(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "SetKeyspace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeyspace indicates an expected call of SetKeyspace
func (mr *MockCassandraMockRecorder) SetKeyspace(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyspace", reflect.TypeOf((*MockCassandra)(nil).SetKeyspace), arg0, arg1)
}

// SystemAddColumnFamily mocks base method
func (m *MockCassandra) SystemAddColumnFamily(arg0 context.Context, arg1 *cassandra.CfDef) (string, error) {
	ret := m.ctrl.Call(m, "SystemAddColumnFamily", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemAddColumnFamily indicates an expected call of SystemAddColumnFamily
func (mr *MockCassandraMockRecorder) SystemAddColumnFamily(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemAddColumnFamily", reflect.TypeOf((*MockCassandra)(nil).SystemAddColumnFamily), arg0, arg1)
}

// SystemAddKeyspace mocks base method
func (m *MockCassandra) SystemAddKeyspace(arg0 context.Context, arg1 *cassandra.KsDef) (string, error) {
	ret := m.ctrl.Call(m, "SystemAddKeyspace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemAddKeyspace indicates an expected call of SystemAddKeyspace
func (mr *MockCassandraMockRecorder) SystemAddKeyspace(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemAddKeyspace", reflect.TypeOf((*MockCassandra)(nil).SystemAddKeyspace), arg0, arg1)
}

// SystemDropColumnFamily mocks base method
func (m *MockCassandra) SystemDropColumnFamily(arg0 context.Context, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "SystemDropColumnFamily", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemDropColumnFamily indicates an expected call of SystemDropColumnFamily
func (mr *MockCassandraMockRecorder) SystemDropColumnFamily(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemDropColumnFamily", reflect.TypeOf((*MockCassandra)(nil).SystemDropColumnFamily), arg0, arg1)
}

// SystemDropKeyspace mocks base method
func (m *MockCassandra) SystemDropKeyspace(arg0 context.Context, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "SystemDropKeyspace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemDropKeyspace indicates an expected call of SystemDropKeyspace
func (mr *MockCassandraMockRecorder) SystemDropKeyspace(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemDropKeyspace", reflect.TypeOf((*MockCassandra)(nil).SystemDropKeyspace), arg0, arg1)
}

// SystemUpdateColumnFamily mocks base method
func (m *MockCassandra) SystemUpdateColumnFamily(arg0 context.Context, arg1 *cassandra.CfDef) (string, error) {
	ret := m.ctrl.Call(m, "SystemUpdateColumnFamily", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemUpdateColumnFamily indicates an expected call of SystemUpdateColumnFamily
func (mr *MockCassandraMockRecorder) SystemUpdateColumnFamily(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemUpdateColumnFamily", reflect.TypeOf((*MockCassandra)(nil).SystemUpdateColumnFamily), arg0, arg1)
}

// SystemUpdateKeyspace mocks base method
func (m *MockCassandra) SystemUpdateKeyspace(arg0 context.Context, arg1 *cassandra.KsDef) (string, error) {
	ret := m.ctrl.Call(m, "SystemUpdateKeyspace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemUpdateKeyspace indicates an expected call of SystemUpdateKeyspace
func (mr *MockCassandraMockRecorder) SystemUpdateKeyspace(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemUpdateKeyspace", reflect.TypeOf((*MockCassandra)(nil).SystemUpdateKeyspace), arg0, arg1)
}

// TraceNextQuery mocks base method
func (m *MockCassandra) TraceNextQuery(arg0 context.Context) ([]byte, error) {
	ret := m.ctrl.Call(m, "TraceNextQuery", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceNextQuery indicates an expected call of TraceNextQuery
func (mr *MockCassandraMockRecorder) TraceNextQuery(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceNextQuery", reflect.TypeOf((*MockCassandra)(nil).TraceNextQuery), arg0)
}

// Truncate mocks base method
func (m *MockCassandra) Truncate(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "Truncate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate
func (mr *MockCassandraMockRecorder) Truncate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockCassandra)(nil).Truncate), arg0, arg1)
}
